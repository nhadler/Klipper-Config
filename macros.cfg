[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  G0 X200 Y200 Z100

  # load filament
[gcode_macro LOAD_FILAMENT]
description: Load in filament
gcode:
    SAVE_GCODE_STATE NAME=loading_filament
    M117 Loading Filament
    M83
    G92 E0.0
    LOW_TEMP_CHECK
    G1 E420 F6000  # length of bowden tube till cold-end (~420mm) 
    G1 E100 F200  # some extra to prime the nozzle --> slower 
    G92 E0.0
    RESTORE_GCODE_STATE NAME=loading_filament
    
# unload filament
[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
    SAVE_GCODE_STATE NAME=unloading_filament
    M125 # park
    M117 Unloading Filament 
    LOW_TEMP_CHECK
    G91 # set relative
    G1 E10 F100 
    G92 E0.0
    G1 E-530 F6000 # the E is the length of the bowden tube (420mm) + 100 mm. 
    G92 E0.0
    RESTORE_GCODE_STATE NAME=unloading_filament

# filament change 
[gcode_macro CHANGE_FILAMENT]
description: Filament change.
gcode:
    M117 Filament Change
    M118 Filament Change
    SAVE_GCODE_STATE NAME=filament_change
    PAUSE
    LOW_TEMP_CHECK
    G91 # relative
    G1 E-1 F300 # retract 1
    M125 # park
    M702 # unload

    M117 New filament
    M118 New filament
    COUNTDOWN TIME=25 MSG="Switch"
    M701
    COUNTDOWN TIME=10 MSG="Clean"
    RESUME
    M117 Resuming
    M118 Resuming
    RESTORE_GCODE_STATE NAME=filament_change
    M117 Printing..
    M118 Printing..

[gcode_macro THE_END]
gcode:
    TURN_OFF_HEATERS    ;turn off heaters... 
    SAVE_GCODE_STATE NAME=END_state
    M83                 ;set relative extrusion
    G92 E0              ;reset extrusion amount
    M204 S10000         ;set max acceleration
    G1 E-2 F4000        ;retract 2mm
    M204 S3000          ;set max acceleration

    ;move the toolhead out of the way
    ;if the tool is less than 30mm away from Z Max, move it to Z max, otherwise, move Z up 30mm
    
    ;Obtain the Z axis limit from the [stepper_z] section of the config file and make
    ;  a decision where to move the Z axis based on the current toolhead 
    {% if printer.toolhead.position.z|float + 30 >= printer.configfile.config["stepper_z"]["position_max"]|float %}
    G90                  ;set absolute extrusion
    G1 Z{printer.configfile.config["stepper_z"]["position_max"]|float} F1000 ;Move tool
    {% else %}

    G91                  ;set relative extrusion
    G1 Z30 F1000         ;move Z axis up 30mm
    {% endif %}

    RESTORE_GCODE_STATE NAME=END_state
    G1 X0 Y200 F24000    ;park tool at back of printer
    M107                
    #UNLOAD_FILAMENT     ;this is a good spot to call an unload 
                         ;filament macro, if you are into that sort of thing
    SET_GCODE_OFFSET Z=0 ;reset whatever babystepping you have done
    M84                  ;disable motors
    CLEAR_PAUSE          ;clear whatever PAUSE state you may have if you have it
    M117 Done.        ;print a message on your LCD

[gcode_macro SAVE_Z_OFFSET]
gcode:
  Z_OFFSET_APPLY_PROBE

[gcode_macro BED_MESH_CALIBRATE]
description: Only probes printing area.
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

# START_PRINT EXTRUDER_TEMP={material_print_temperature_layer_0} BED_TEMP={material_bed_temperature_layer_0} AREA_START=%MINX%,%MINY% AREA_END=%MAXX%,%MAXY% FILAMENT_TYPE={material_type}
[gcode_macro START_PRINT]
variable_parameter_EXTRUDER_TEMP: 220
variable_parameter_BED_TEMP: 70
# gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
# gcode parameter for filament
variable_parameter_FILAMENT_TYPE : "PLA"
gcode:
    M117 MSG="Homing XY..."
    G28 XY ; home xy axis

    M117 MSG="Waiting for temperature"

    # preheat temp
    M190 S{params.BED_TEMP|default(70)|float}
    M104 S150

    M117 MSG="Homing Z..."
    G28 Z ;home Z

    BED_MESH_CLEAR
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    BED_MESH_OUTPUT

    G0 X0 Y0 Z10 F6000

    M117 MSG="Waiting for temperature"
    M109 S{params.EXTRUDER_TEMP|default(220)|float}

    M117 MSG="Prime Line"
    G90 ; Set all axes to absolute
    G92 E0 ;Reset Extruder
    G0 X-3 Y180 F3000 ; move outside print area
    G1 Z0.2 F1000 ;Move to start position
    G1 Y95 E9 F1000 ;Draw the first line
    G1 Y85 F3000 ;Move to side a little
    G1 Y0 E21 F1500.0 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 Z2.0 F1000 ;Move Z Axis up

    M117 MSG="{printer.print_stats.filename}"